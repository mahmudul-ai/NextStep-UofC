# Generated by Django 5.2 on 2025-04-22 22:46

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('employer', 'Employer')], default='student', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employer',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('CompanyName', models.CharField(db_column='CompanyName', max_length=255)),
                ('Industry', models.CharField(blank=True, db_column='Industry', max_length=255, null=True)),
                ('Website', models.URLField(blank=True, db_column='Website', null=True)),
                ('Description', models.TextField(blank=True, db_column='Description', null=True)),
                ('VerificationStatus', models.CharField(db_column='VerificationStatus', max_length=50)),
            ],
            options={
                'db_table': 'employer',
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('UCID', models.CharField(db_column='UCID', max_length=8, unique=True)),
                ('Major', models.CharField(blank=True, db_column='Major', max_length=255, null=True)),
                ('GraduationYear', models.IntegerField(blank=True, db_column='GraduationYear', null=True)),
            ],
            options={
                'db_table': 'student',
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('JobID', models.AutoField(db_column='JobID', primary_key=True, serialize=False)),
                ('JobTitle', models.CharField(db_column='JobTitle', max_length=255)),
                ('Description', models.TextField(db_column='Description')),
                ('Salary', models.DecimalField(db_column='Salary', decimal_places=2, max_digits=10)),
                ('Location', models.CharField(db_column='Location', max_length=255)),
                ('Deadline', models.DateField(db_column='Deadline')),
                ('Employer', models.ForeignKey(db_column='EmployerID', on_delete=django.db.models.deletion.CASCADE, to='api.employer')),
            ],
            options={
                'db_table': 'job',
            },
        ),
        migrations.CreateModel(
            name='Applicant',
            fields=[
                ('student', models.OneToOneField(db_column='SUCID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.student')),
                ('CGPA', models.DecimalField(db_column='CGPA', decimal_places=2, max_digits=3)),
                ('Resume', models.FileField(db_column='Resume', upload_to='resume/')),
                ('VerificationStatus', models.CharField(db_column='VerificationStatus', max_length=50)),
            ],
            options={
                'db_table': 'applicant',
            },
        ),
        migrations.CreateModel(
            name='Moderator',
            fields=[
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.student')),
            ],
            options={
                'db_table': 'moderator',
            },
        ),
        migrations.CreateModel(
            name='Volunteer',
            fields=[
                ('SUCID', models.OneToOneField(db_column='SUCID', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='api.student')),
                ('Hours', models.IntegerField(db_column='Hours')),
            ],
            options={
                'db_table': 'volunteer',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('PostID', models.AutoField(db_column='PostID', primary_key=True, serialize=False)),
                ('Content', models.TextField(db_column='Content')),
                ('Date', models.DateField(db_column='Date')),
                ('VUCID', models.ForeignKey(db_column='VUCID', on_delete=django.db.models.deletion.CASCADE, to='api.student')),
            ],
            options={
                'db_table': 'post',
            },
        ),
        migrations.CreateModel(
            name='Application',
            fields=[
                ('ApplicationID', models.AutoField(db_column='ApplicationID', primary_key=True, serialize=False)),
                ('Status', models.CharField(db_column='Status', max_length=50)),
                ('DateApplied', models.DateField(db_column='DateApplied')),
                ('Job', models.ForeignKey(db_column='JobID', on_delete=django.db.models.deletion.CASCADE, to='api.job')),
                ('Employer', models.ForeignKey(db_column='EmployerID', on_delete=django.db.models.deletion.CASCADE, to='api.employer')),
                ('ApplicantUCID', models.ForeignKey(db_column='ApplicantUCID', on_delete=django.db.models.deletion.CASCADE, to='api.student')),
            ],
            options={
                'db_table': 'application',
            },
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('VID', models.AutoField(db_column='VID', primary_key=True, serialize=False)),
                ('VerificationStatus', models.CharField(db_column='VerificationStatus', max_length=50)),
                ('VerificationDate', models.DateField(db_column='VerificationDate')),
                ('ApplicantUCID', models.ForeignKey(db_column='ApplicantUCID', on_delete=django.db.models.deletion.CASCADE, to='api.student')),
                ('Moderator', models.ForeignKey(db_column='ModeratorID', on_delete=django.db.models.deletion.CASCADE, to='api.moderator')),
            ],
            options={
                'db_table': 'verification',
            },
        ),
        migrations.CreateModel(
            name='EmployerVerification',
            fields=[
                ('VID', models.AutoField(db_column='VID', primary_key=True, serialize=False)),
                ('VerificationStatus', models.CharField(db_column='VerificationStatus', max_length=50)),
                ('VerificationDate', models.DateField(db_column='VerificationDate')),
                ('Employer', models.ForeignKey(db_column='EmployerID', on_delete=django.db.models.deletion.CASCADE, to='api.employer')),
                ('Moderator', models.ForeignKey(db_column='ModeratorID', on_delete=django.db.models.deletion.CASCADE, to='api.moderator')),
            ],
            options={
                'db_table': 'employer_verification',
            },
        ),
        migrations.CreateModel(
            name='JobModeration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Job', models.ForeignKey(db_column='JobID', on_delete=django.db.models.deletion.CASCADE, to='api.job')),
                ('Employer', models.ForeignKey(db_column='EmployerID', on_delete=django.db.models.deletion.CASCADE, to='api.employer')),
                ('Moderator', models.ForeignKey(db_column='ModeratorID', on_delete=django.db.models.deletion.CASCADE, to='api.moderator')),
            ],
            options={
                'db_table': 'job_moderation',
                'unique_together': {('Moderator', 'Job', 'Employer')},
            },
        ),
    ]
